Exercise 1
a) Write C++ program to find length of string using pointer.
b) Write C++ program to copy one string to another string using pointer.
c) Simple Program for Count vowels String Using Pointer in C++


Code:

#include <iostream>
#include <string>
using namespace std;


stlen(const string& str) {
    const char* ptr = &str[0]; 
    int len =0;
    while(*ptr != '\0') { 
        ptr++; 
        len++;
    }
    return len;
}

int main() {
    string sen;
    cout << "Enter a sentence: ";
    getline(cin, sen); 

    cout << "The length of the sentence is: " << stlen(sen)-1<< std::endl;
    return 0;
}


b) Write C++ program to copy one string to another string using pointer.



#include <iostream>
#include <string>
using namespace std;

copy(string* string1,string* string2)
{
	*string2=*string1;
}
int main() {
    string string1, string2;
    cout<<"Enter String1"<<endl;
    getline(cin,string1);
    copy(&string1,&string2);
    cout<<"Value of string1 is: "<<string1<<endl;
    cout<<"Value of string2 is: "<<string1<<endl;
}


c) Simple Program for Count vowels String Using Pointer in C++

#include <iostream>
#include <string>
using namespace std;


vol(const string& str) {
    const char* ptr = &str[0]; 
    int len =0;
    while(*ptr != '\0') { 
    	if (*ptr== 'a' || *ptr== 'e' ||*ptr== 'i'||*ptr== 'o'||*ptr== 'u'||
		*ptr== 'A' || *ptr== 'E' ||*ptr== 'I'||*ptr== 'O'||*ptr== 'U'){
    		len++;
		}
        ptr++; 
        
    }
    return len;
}

int main() {
    string sen;
    cout << "Enter a sentence: ";
    getline(cin, sen); 

    cout << "The vowel in the sentence is: " << vol(sen)<< std::endl;
    return 0;
}





Exercise 2
Write a recursive function that takes in one argument n and computes n!, the factorial function. Recall
that n! = n*(n-1)! when n&gt;0 and 0! = 1.


Code:



#include<iostream>
using namespace std;
int fac(int);
int main()
{
	int num,fact;
	cout<<"Enter a number which factorial is need"<<endl;
	cin>>num;
	fact=fac(num);
	cout<<"Factorial of "<<num<<" is: "<<fact<<endl;
	
	
}
int fac(int a){
	if (a<1){
		return 1;
	}
	return a*=fac(a-1);
}




Exercise 3
Fibonacii by using recursion as was discussed in the class.

Code:



#include<iostream>
using namespace std;
int fib(int);
int main()
{
	int num;
	cout<<"Enter a number which fib is need"<<endl;
	cin>>num;
	cout<<fib(num);
	
	
}
int fib(int a){
	if (a<=1){
		return a;
	}
	else{
	return fib(a-1)+fib(a-2);}
}



Exercise 4
Write a recursive method sumTo that accepts an integer parameter n and returns the sum of the first n
reciprocals. In other words: sumTo(n) returns: 1 + 1/2 + 1/3 + 1/4 + ... + 1/n
Assume that your method is always passed a value greater than equal to 0.


Code:


#include <iostream>
using namespace std;
double sum(int n) {
    if (n == 0) return 0;
    return (1.0/n)+sumTo(n-1);
}

int main() {
    int number;
    cout << "Enter a positive integer: ";
    cin >> number;
    cout << "The sum of the first " << number << " reciprocals is: " << sum(number) << std::endl;
    return 0;
}



Exercise 5
Count number of zeros in a number by using recursion.
For e.g.

• number of zeros in 20030 is 3.
• number of zeros in 20031 is 2.


Code:


#include <iostream>
#include <string>
using namespace std;


count(int a) {
	int len=0;
    while(a!=0)
    {
    	int rem=a%10;
    	if (rem==0)
    	{
    		len++;
		}
		a/=10;
	}
    return len;
}

int main() {
    int num;
    cout << "Enter your Number: ";
    cin>>num;

    cout << "The zero in the "<<num<<" is: " << count(num)<< std::endl;
    return 0;
}



Exercise 6

Two strings are called anagrams if they contain same set of characters but in different order. Some
interesting examples are:
• “Debit card” = “Bad credit”,
• “Graduation” = “Out in a drag”,
• “Election Results” = “Lies Let’s Recount”,
• “Software” = “Swear Oft”.
Write a function isAnagram() which checks whether two given strings are anagrams of each other.

Code:

#include<iostream>
#include <cctype>
#include <algorithm>
using namespace std;
isAnagram(string& st1,string& st2,int len1){
	int c=0;
	char* ptr1=&st1[0];
	char* ptr2=&st2[0];
	while(*ptr1!='\0')
	{
		if(tolower(*ptr1)==tolower(*ptr2)){c++;}
		ptr2++;
		ptr1++;}
	if (c==len1){cout<<"Yes strings are anagrams";}
	else{cout<<"NO strings are not anagrams";}
}
int main()
{	string str1,str2;
	cout<<"Enter String1"<<endl;
	getline(cin,str1);
	cout<<"Enter String2"<<endl;
	getline(cin,str2);
	sort(str1.begin(), str1.end());
	sort(str2.begin(), str2.end());
	int len1=str1.length();

	isAnagram(str1,str2,len1);}
